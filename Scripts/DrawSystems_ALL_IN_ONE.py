# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# DrawSystems.py
# Created on: 2016-06-24 12:05:46.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: DrawSystems <Feature_Set> <Output_XY_Systems> 
# Description: 
# ---------------------------------------------------------------------------

# Import all necessary module dependencies
import arcpy
import os
import sys
import csv

arcpy.env.overwriteOutput = True
arcpy.env.outputCoordinateSystem = arcpy.SpatialReference(3857)

def Encode(x):
    """Encodes values into 'utf-8' format"""
    if isinstance(x, unicode):
        return x.encode("utf-8", 'ignore')
    else:
        return str(x)

def ExcludeFields(table, types=[]):
    """Return a list of fields minus those with specified field types"""
    fieldNames = []
    fds = arcpy.ListFields(table)
    for f in fds:
        if f.type not in types:
            fieldNames.append(f.name)
    return fieldNames

def ExportToCSV(fc, output):
    """Export Data to a CSV file"""
    # create the output writer
    outWriter = csv.writer(open(output, 'wb'), dialect='excel')

    excludeTypes = ['Geometry', 'OID']
    fields = ExcludeFields(fc, excludeTypes)

    # Create Search Cursor: the following only works with ArcGIS 10.1+
    with arcpy.da.SearchCursor(fc, fields) as cursor:
        outWriter.writerow(cursor.fields)
        for row in cursor:
            row = [v.decode('utf8') if isinstance(v, str) else v for v in row]
            outWriter.writerow([unicode(s).encode("utf-8") for s in row])
    del row, cursor

def DrawSystems():
    """Draws telecoupling systems on top of basemap interactively or from table"""

    # Local variable:
    out_layer = "Systems_lyr"

    # Get the value of the input parameter
    isChecked_FeatureSet = arcpy.GetParameter(0)
    inTable = arcpy.GetParameterAsText(1)
    X_field = arcpy.GetParameterAsText(2)
    Y_field = arcpy.GetParameterAsText(3)
    inFeatureSet = arcpy.GetParameterAsText(4)
    inJoinLayer = arcpy.GetParameterAsText(5)
    isChecked_AddXY = arcpy.GetParameter(6)

    arcpy.SetProgressorLabel('Creating System Components ...')
    arcpy.AddMessage('Creating System Components ...')

    if isChecked_FeatureSet == False:

        if inTable or inTable != "#":
            try:
                # Process: Make XY Event Layer (temporary)
                arcpy.MakeXYEventLayer_management(table=inTable,
                                                  in_x_field=X_field, in_y_field=Y_field,
                                                  out_layer=out_layer)

                # Process: Copy Feature Class
                outSystems_fc = os.path.join(arcpy.env.scratchGDB, "Systems")
                outFC = arcpy.CopyFeatures_management(out_layer, outSystems_fc)
            except Exception:
                outFC = ""
                e = sys.exc_info()[1]
                arcpy.AddError('An error occurred: {}'.format(e.args[0]))
        else:
            outFC = ""
            arcpy.AddError('No Features Have Been Added to the Map!')

    else:

        if inFeatureSet or inFeatureSet != "#":
            try:
                # Process: Make Feature Layer (temporary)
                arcpy.MakeFeatureLayer_management(in_features=inFeatureSet, out_layer=out_layer)

                # Process: Copy Feature Class
                outSystems_fc = os.path.join(arcpy.env.scratchGDB, "Systems")
                arcpy.CopyFeatures_management(out_layer, outSystems_fc)

                # Process: Spatial Join of Target (Point) Feature Class
                ''' NOTE: this step is to add admin information from underlying political boundaries
                (must be available and with field names specified in the Export to ASCII below!!)'''

                arcpy.SetProgressorLabel('Joining Feature Class with Administrative Boundaries Layer ...')
                arcpy.AddMessage('Joining Feature Class with Administrative Boundaries Layer ...')

                # Create list of Fields that are to be kept in the join operation below
                fldLst = ["Role", "NAME_0", "NAME_1", "NAME_2"]
                # Initialize a FieldMappings object
                fldMappings = arcpy.FieldMappings()

                for field in fldLst:
                    # creates a field map with name of input field
                    vars()[field] = arcpy.FieldMap()
                    if field == "Role":
                        vars()[field].addInputField(outSystems_fc, "Role")
                    else:
                        vars()[field].addInputField(inJoinLayer, field)

                    outField = vars()[field].outputField
                    outField.name = field
                    vars()[field].outputField = outField
                    fldMappings.addFieldMap(vars()[field])

                outSystemsJoin_fc = os.path.join(arcpy.env.scratchGDB, "SystemsJoin")
                arcpy.SpatialJoin_analysis(target_features=outSystems_fc, join_features=inJoinLayer,
                                                   out_feature_class=outSystemsJoin_fc,
                                                   field_mapping=fldMappings)

                if isChecked_AddXY:
                    arcpy.SetProgressorLabel('Adding XY Coordinates ...')
                    arcpy.AddMessage('Adding XY Coordinates ...')
                    # Process: Add Coordinates
                    arcpy.AddXY_management(outSystemsJoin_fc)

                # Process: Delete Unwanted/Unnecessary fields
                arcpy.SetProgressorLabel('Removing Unwanted Fields ...')
                arcpy.AddMessage('Removing Unwanted Fields ...')
                outFC = arcpy.DeleteField_management(outSystemsJoin_fc, ["Join_Count", "TARGET_FID"])

                # Process: Export Data to CSV File
                arcpy.SetProgressorLabel('Exporting Feature Class Attributes to CSV ...')
                arcpy.AddMessage('Exporting Feature Class Attributes to CSV ...')
                outTable_CSV = os.path.join(arcpy.env.scratchFolder, "Systems_Table.csv")
                ExportToCSV(fc=outSystemsJoin_fc, output=outTable_CSV)

            except Exception:
                outFC = ""
                e = sys.exc_info()[1]
                arcpy.AddError('An error occurred: {}'.format(e.args[0]))
        else:
            outFC = ""
            arcpy.AddError('No Features Have Been Added to the Map!')

    #### Set Parameters ####
    arcpy.SetParameter(7, outFC)


if __name__ == '__main__':
    DrawSystems()






